// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
		# c_real: { value: 0.0 }
		# c_image: { value: 0.0 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

//   uniform Fractal {
// 	  float c_real;
// 	  float c_image;
//   };

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  
  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    vec2 uv = v_uv0;
    uv = (uv - 0.5) * 2.0;

	float real = uv.x, image = uv.y, r2 = 0.0, count = 0.0;
	for(float i = 0.0; i < 9999.0; i++){
		float tmp_real = real;
        real = tmp_real * tmp_real - image * image + 0.2;
        image = 2.0 * tmp_real * image;
        r2 = real * real + image * image;
        if(r2 > 4.0){
            break;
        }
	}
    if(r2 > 4.0){
        CCTexture(texture, v_uv0, o);
    } else {
        vec4 old;
        // CCTexture(texture, v_uv0, old);
        uv = fract(uv * count) / 2.0 + 0.5;
        CCTexture(texture, uv, o);
    }
        CCTexture(texture, v_uv0, o);

    // #if USE_TEXTURE
    //   CCTexture(texture, v_uv0, o);
    // #endif

    // o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
