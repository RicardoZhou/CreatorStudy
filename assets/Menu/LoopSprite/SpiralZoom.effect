// Copyright 2020 Cao Gaoting<caogtaa@gmail.com>
// https://caogtaa.github.io
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

/*
 * Date: 2020-07-13 02:44:17
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2020-07-22 14:03:10
*/ 

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        C: { value: [1.0, 0.0], inspector: { displayName: '指数' } }
        R: { value: 0.9, inspector: { displayName: '圆半径' } }
        scale: { value: 2.5, inspector: { displayName: '同心圆缩小系数' } }
        angle: { value: 0.13659, inspector: { displayName: '同心圆旋转角(radius)' } }
        speed: { value: 1.0, inspector: { displayName: '动画速度' } }
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec2 a_uv0;
  out vec2 v_uv0;
  
  void main() {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;
    v_uv0.y = 1.0-v_uv0.y;
    gl_Position = pos;
  }
}%

// by caogtaa
CCProgram fs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform FARGS {
      vec2 C;
      float R;
      float scale;
      float angle;
      float speed;
  };

  #define E	2.718281828459045
  #define PI	3.141592653589793
  #define A	c.x
  #define B	c.y
  #define X	z.x
  #define Y	z.y

  float Circle(vec2 uv, vec2 o, float r, float blur) {
      return smoothstep(0., blur, distance(uv, o) - r);
  }

  mat2 R2(float angle){
      float c = cos(angle);
      float s = sin(angle);
      return mat2(c, -s, s, c);
  }

  vec2 ComplexPow(vec2 z, vec2 c) {
      float zmod = sqrt(dot(z, z));		// |z|
      float t = atan(Y, X);
      
      float part1 = pow(zmod, A) * pow(E, -B*t);
      float exp2 = log(zmod) * B;
      vec2 part2 = vec2(cos(exp2), sin(exp2));
      float exp3 = A * t;
      vec2 part3 = vec2(cos(exp3), sin(exp3));
      
      vec2 part2x3 = vec2(
          part2.x * part3.x - part2.y * part3.y,
          part2.x * part3.y + part2.y * part3.x);
      
      return part1 * part2x3;
  }

  void main()
  {
      // uv原点居中
      vec2 uv = v_uv0.xy * 2. - 1.;

      // 初始图形放大，避免原图形变后边缘片元采样超出图片
      uv *= 0.5;

      // 同心圆旋转角度，通过uniform传入
      // float angle = PI / 23.;

      // 同心圆缩放系数，通过uniform传入
      // float scale = 2.5;

      // 动画速度，通过uniform传入
      // float speed = 1.0;

      // 整体动画缩放比例，scale值和同心圆的缩放系数保持一致，这样动画循环可以对接
      float zoom = pow(scale, fract(cc_time.x * speed));
      uv /= zoom;

      // 当前动画循环次数
      float loop = floor(cc_time.x * speed);

      // 每个动画循环起始帧做整体旋转，对接上一个循环的末尾
      uv = R2(angle * loop) * uv;

      // 圆心坐标
      vec2 origin = vec2(0.);

      // 圆半径，从uniform中获取
      float r = R;

      // 边缘模糊长度
      float blur = 0.01;
      
      // 指数，目前从uniform中获取
      // vec2 C = vec2(1., 0.);

      // 当前图形遮罩
      float mask = 1.0;
      
      // 旋转矩阵，每次迭代uv旋转一定角度
      mat2 matR2 = R2(angle);

      // 经螺旋形变后的uv
      vec2 spiralUV = ComplexPow(uv, C);
      
      // 混合后的最终颜色，以第一次形变的图形作为背景
      // 将uv从(-1, 1)重新映射回(0, 1)区间，然后对纹理采样
      vec3 finalColor = texture(texture, spiralUV * 0.5 + 0.5).rgb;

      for (int i = 0; i < 6; ++i) {
          // 放大自变量区间的同时对uv进行旋转
          uv = matR2 * uv * scale;

          // 计算螺旋形变后的uv，用该uv画圆、取色
          spiralUV = ComplexPow(uv, C);
          
          // 获得一个半径r的形变后的圆形遮罩
          float mask = Circle(spiralUV, origin, r, blur);

          // 将uv从(-1, 1)重新映射回(0, 1)区间，然后对纹理采样
          vec3 color = texture(texture, spiralUV * 0.5 + 0.5).rgb;

          // 当前遮罩内的片元用新颜色覆盖，遮罩外的保持上一次的颜色
          finalColor = mix(color, finalColor, mask);
      }

      // 输出颜色
      gl_FragColor = vec4(finalColor, 1.0);
  }
}%
