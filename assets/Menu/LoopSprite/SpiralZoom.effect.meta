{
  "ver": "1.0.25",
  "uuid": "93c8d668-fef5-45d9-8ae7-03e44def00b2",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_uv0.y = 1.0-v_uv0.y;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform vec4 cc_time;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec2 C;\nuniform float R;\nuniform float scale;\nuniform float angle;\nuniform float speed;\nfloat Circle(vec2 uv, vec2 o, float r, float blur) {\n    return smoothstep(0., blur, distance(uv, o) - r);\n}\nmat2 R2(float angle){\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\nvec2 ComplexPow(vec2 z, vec2 c) {\n    float zmod = sqrt(dot(z, z));\n    float t = atan(z.y, z.x);\n    float part1 = pow(zmod, c.x) * pow(2.718281828459045, -c.y*t);\n    float exp2 = log(zmod) * c.y;\n    vec2 part2 = vec2(cos(exp2), sin(exp2));\n    float exp3 = c.x * t;\n    vec2 part3 = vec2(cos(exp3), sin(exp3));\n    vec2 part2x3 = vec2(\n        part2.x * part3.x - part2.y * part3.y,\n        part2.x * part3.y + part2.y * part3.x);\n    return part1 * part2x3;\n}\nvoid main()\n{\n    vec2 uv = v_uv0.xy * 2. - 1.;\n    uv *= 0.5;\n    float zoom = pow(scale, fract(cc_time.x * speed));\n    uv /= zoom;\n    float loop = floor(cc_time.x * speed);\n    uv = R2(angle * loop) * uv;\n    vec2 origin = vec2(0.);\n    float r = R;\n    float blur = 0.01;\n    float mask = 1.0;\n    mat2 matR2 = R2(angle);\n    vec2 spiralUV = ComplexPow(uv, C);\n    vec3 finalColor = texture2D(texture, spiralUV * 0.5 + 0.5).rgb;\n    for (int i = 0; i < 6; ++i) {\n        uv = matR2 * uv * scale;\n        spiralUV = ComplexPow(uv, C);\n        float mask = Circle(spiralUV, origin, r, blur);\n        vec3 color = texture2D(texture, spiralUV * 0.5 + 0.5).rgb;\n        finalColor = mix(color, finalColor, mask);\n    }\n    gl_FragColor = vec4(finalColor, 1.0);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_uv0.y = 1.0-v_uv0.y;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform FARGS {\n    vec2 C;\n    float R;\n    float scale;\n    float angle;\n    float speed;\n};\nfloat Circle(vec2 uv, vec2 o, float r, float blur) {\n    return smoothstep(0., blur, distance(uv, o) - r);\n}\nmat2 R2(float angle){\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\nvec2 ComplexPow(vec2 z, vec2 c) {\n    float zmod = sqrt(dot(z, z));\n    float t = atan(z.y, z.x);\n    float part1 = pow(zmod, c.x) * pow(2.718281828459045, -c.y*t);\n    float exp2 = log(zmod) * c.y;\n    vec2 part2 = vec2(cos(exp2), sin(exp2));\n    float exp3 = c.x * t;\n    vec2 part3 = vec2(cos(exp3), sin(exp3));\n    vec2 part2x3 = vec2(\n        part2.x * part3.x - part2.y * part3.y,\n        part2.x * part3.y + part2.y * part3.x);\n    return part1 * part2x3;\n}\nvoid main()\n{\n    vec2 uv = v_uv0.xy * 2. - 1.;\n    uv *= 0.5;\n    float zoom = pow(scale, fract(cc_time.x * speed));\n    uv /= zoom;\n    float loop = floor(cc_time.x * speed);\n    uv = R2(angle * loop) * uv;\n    vec2 origin = vec2(0.);\n    float r = R;\n    float blur = 0.01;\n    float mask = 1.0;\n    mat2 matR2 = R2(angle);\n    vec2 spiralUV = ComplexPow(uv, C);\n    vec3 finalColor = texture(texture, spiralUV * 0.5 + 0.5).rgb;\n    for (int i = 0; i < 6; ++i) {\n        uv = matR2 * uv * scale;\n        spiralUV = ComplexPow(uv, C);\n        float mask = Circle(spiralUV, origin, r, blur);\n        vec3 color = texture(texture, spiralUV * 0.5 + 0.5).rgb;\n        finalColor = mix(color, finalColor, mask);\n    }\n    gl_FragColor = vec4(finalColor, 1.0);\n}"
      }
    }
  ],
  "subMetas": {}
}