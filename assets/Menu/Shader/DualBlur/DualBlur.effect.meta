{
  "ver": "1.0.25",
  "uuid": "75e05777-dade-48d3-b40c-247768c7daa8",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvarying vec4 v_uv1;\nvarying vec4 v_uv2;\nvarying vec4 v_uv3;\nvarying vec4 v_uv4;\n#endif\nuniform vec2 resolution;\nuniform float offset;\nvec4 Down () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  vec2 uv = a_uv0;\n  vec2 texelSize = 0.5 / resolution;\n  v_uv0 = uv;\n  v_uv1.xy = uv - texelSize * vec2(offset);\n  v_uv1.zw = uv + texelSize * vec2(offset);\n  v_uv2.xy = uv - vec2(texelSize.x, -texelSize.y) * vec2(offset);\n  v_uv2.zw = uv + vec2(texelSize.x, -texelSize.y) * vec2(offset);\n  #endif\n  v_color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = Down(); }",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nvarying vec4 v_uv1;\nvarying vec4 v_uv2;\nvarying vec4 v_uv3;\nvarying vec4 v_uv4;\nuniform sampler2D texture;\n#endif\nvec4 Down () {\n  vec4 sum = vec4(1);\n  #if USE_TEXTURE\n    sum = texture2D(texture, v_uv0) * 4.;\n    sum += texture2D(texture, v_uv1.xy);\n    sum += texture2D(texture, v_uv1.zw);\n    sum += texture2D(texture, v_uv2.xy);\n    sum += texture2D(texture, v_uv2.zw);\n    sum *= 0.125;\n  #endif\n  sum *= v_color;\n  ALPHA_TEST(sum);\n  return CCFragOutput(sum);\n}\nvoid main() { gl_FragColor = Down(); }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\nout vec4 v_uv1;\nout vec4 v_uv2;\nout vec4 v_uv3;\nout vec4 v_uv4;\n#endif\nuniform Properties {\n  vec2 resolution;\n  float offset;\n};\nvec4 Down () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  vec2 uv = a_uv0;\n  vec2 texelSize = 0.5 / resolution;\n  v_uv0 = uv;\n  v_uv1.xy = uv - texelSize * vec2(offset);\n  v_uv1.zw = uv + texelSize * vec2(offset);\n  v_uv2.xy = uv - vec2(texelSize.x, -texelSize.y) * vec2(offset);\n  v_uv2.zw = uv + vec2(texelSize.x, -texelSize.y) * vec2(offset);\n  #endif\n  v_color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = Down(); }",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nin vec4 v_uv1;\nin vec4 v_uv2;\nin vec4 v_uv3;\nin vec4 v_uv4;\nuniform sampler2D texture;\n#endif\nuniform Properties {\n  vec2 resolution;\n  float offset;\n};\nvec4 Down () {\n  vec4 sum = vec4(1);\n  #if USE_TEXTURE\n    sum = texture2D(texture, v_uv0) * 4.;\n    sum += texture2D(texture, v_uv1.xy);\n    sum += texture2D(texture, v_uv1.zw);\n    sum += texture2D(texture, v_uv2.xy);\n    sum += texture2D(texture, v_uv2.zw);\n    sum *= 0.125;\n  #endif\n  sum *= v_color;\n  ALPHA_TEST(sum);\n  return CCFragOutput(sum);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = Down(); }"
      }
    },
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvarying vec4 v_uv1;\nvarying vec4 v_uv2;\nvarying vec4 v_uv3;\nvarying vec4 v_uv4;\n#endif\nuniform vec2 resolution;\nuniform float offset;\nvec4 Up () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  vec2 uv = a_uv0;\n  vec2 texelSize = 0.5 / resolution;\n  v_uv0 = uv;\n  v_uv1.xy = uv + vec2(-texelSize.x * 2., 0) * offset;\n  v_uv1.zw = uv + vec2(-texelSize.x, texelSize.y) * offset;\n  v_uv2.xy = uv + vec2(0, texelSize.y * 2.) * offset;\n  v_uv2.zw = uv + texelSize * offset;\n  v_uv3.xy = uv + vec2(texelSize.x * 2., 0) * offset;\n  v_uv3.zw = uv + vec2(texelSize.x, -texelSize.y) * offset;\n  v_uv4.xy = uv + vec2(0, -texelSize.y * 2.) * offset;\n  v_uv4.zw = uv - texelSize * offset;\n  #endif\n  v_color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = Up(); }",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nvarying vec4 v_uv1;\nvarying vec4 v_uv2;\nvarying vec4 v_uv3;\nvarying vec4 v_uv4;\nuniform sampler2D texture;\n#endif\nvec4 Up () {\n  vec4 sum = vec4(1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv1.xy);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv1.xy + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    sum.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    sum.a *= texture_tmp.a;\n  #else\n    sum *= texture_tmp;\n  #endif\n    sum += texture2D(texture, v_uv1.zw) * 2.;\n    sum += texture2D(texture, v_uv2.xy);\n    sum += texture2D(texture, v_uv2.zw) * 2.;\n    sum += texture2D(texture, v_uv3.xy);\n    sum += texture2D(texture, v_uv3.zw) * 2.;\n    sum += texture2D(texture, v_uv4.xy);\n    sum += texture2D(texture, v_uv4.zw) * 2.;\n    sum *= 0.0833;\n  #endif\n  sum *= v_color;\n  ALPHA_TEST(sum);\n  return CCFragOutput(sum);\n}\nvoid main() { gl_FragColor = Up(); }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\nout vec4 v_uv1;\nout vec4 v_uv2;\nout vec4 v_uv3;\nout vec4 v_uv4;\n#endif\nuniform Properties {\n  vec2 resolution;\n  float offset;\n};\nvec4 Up () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  vec2 uv = a_uv0;\n  vec2 texelSize = 0.5 / resolution;\n  v_uv0 = uv;\n  v_uv1.xy = uv + vec2(-texelSize.x * 2., 0) * offset;\n  v_uv1.zw = uv + vec2(-texelSize.x, texelSize.y) * offset;\n  v_uv2.xy = uv + vec2(0, texelSize.y * 2.) * offset;\n  v_uv2.zw = uv + texelSize * offset;\n  v_uv3.xy = uv + vec2(texelSize.x * 2., 0) * offset;\n  v_uv3.zw = uv + vec2(texelSize.x, -texelSize.y) * offset;\n  v_uv4.xy = uv + vec2(0, -texelSize.y * 2.) * offset;\n  v_uv4.zw = uv - texelSize * offset;\n  #endif\n  v_color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = Up(); }",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nin vec4 v_uv1;\nin vec4 v_uv2;\nin vec4 v_uv3;\nin vec4 v_uv4;\nuniform sampler2D texture;\n#endif\nuniform Properties {\n  vec2 resolution;\n  float offset;\n};\nvec4 Up () {\n  vec4 sum = vec4(1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv1.xy);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv1.xy + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    sum.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    sum.a *= texture_tmp.a;\n  #else\n    sum *= texture_tmp;\n  #endif\n    sum += texture2D(texture, v_uv1.zw) * 2.;\n    sum += texture2D(texture, v_uv2.xy);\n    sum += texture2D(texture, v_uv2.zw) * 2.;\n    sum += texture2D(texture, v_uv3.xy);\n    sum += texture2D(texture, v_uv3.zw) * 2.;\n    sum += texture2D(texture, v_uv4.xy);\n    sum += texture2D(texture, v_uv4.zw) * 2.;\n    sum *= 0.0833;\n  #endif\n  sum *= v_color;\n  ALPHA_TEST(sum);\n  return CCFragOutput(sum);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = Up(); }"
      }
    }
  ],
  "subMetas": {}
}